// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get reinvestCount(): BigInt {
    let value = this.get("reinvestCount");
    return value.toBigInt();
  }

  set reinvestCount(value: BigInt) {
    this.set("reinvestCount", Value.fromBigInt(value));
  }

  get reinvests(): Array<string> | null {
    let value = this.get("reinvests");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set reinvests(value: Array<string> | null) {
    if (value === null) {
      this.unset("reinvests");
    } else {
      this.set("reinvests", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Farm extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Farm entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Farm entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Farm", id.toString(), this);
  }

  static load(id: string): Farm | null {
    return store.get("Farm", id) as Farm | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get depositToken(): string {
    let value = this.get("depositToken");
    return value.toString();
  }

  set depositToken(value: string) {
    this.set("depositToken", Value.fromString(value));
  }

  get rewardToken(): string {
    let value = this.get("rewardToken");
    return value.toString();
  }

  set rewardToken(value: string) {
    this.set("rewardToken", Value.fromString(value));
  }

  get reinvests(): Array<string> | null {
    let value = this.get("reinvests");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set reinvests(value: Array<string> | null) {
    if (value === null) {
      this.unset("reinvests");
    } else {
      this.set("reinvests", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Reinvest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Reinvest entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Reinvest entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Reinvest", id.toString(), this);
  }

  static load(id: string): Reinvest | null {
    return store.get("Reinvest", id) as Reinvest | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get by(): string {
    let value = this.get("by");
    return value.toString();
  }

  set by(value: string) {
    this.set("by", Value.fromString(value));
  }

  get farm(): string {
    let value = this.get("farm");
    return value.toString();
  }

  set farm(value: string) {
    this.set("farm", Value.fromString(value));
  }

  get ratio(): BigDecimal {
    let value = this.get("ratio");
    return value.toBigDecimal();
  }

  set ratio(value: BigDecimal) {
    this.set("ratio", Value.fromBigDecimal(value));
  }

  get totalDeposits(): BigInt {
    let value = this.get("totalDeposits");
    return value.toBigInt();
  }

  set totalDeposits(value: BigInt) {
    this.set("totalDeposits", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}
