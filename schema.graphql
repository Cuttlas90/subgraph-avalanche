type User @entity {
  id: ID!
  reinvestCount: BigInt!
  reinvests: [Reinvest!] @derivedFrom(field: "by")
  deposits: [Deposit!] @derivedFrom(field: "by")
  withdraws: [Withdraw!] @derivedFrom(field: "by")
}

type Farm @entity {
  id: ID!
  name: String!
  depositToken: Token!
  depositTokenBalance: BigInt!
  rewardToken: Token!
  adminFee: BigInt!
  devFee: BigInt!
  reinvestFee: BigInt!
  reinvestCount: BigInt!
  reinvests: [Reinvest!] @derivedFrom(field: "farm")
  deposits: [Deposit!] @derivedFrom(field: "farm")
  withdraws: [Withdraw!] @derivedFrom(field: "farm")
}

type Reinvest @entity {
  id: ID!
  by: User!
  farm: Farm!
  ratio: BigDecimal!
  totalDeposits: BigInt!
  totalSupply: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Token @entity {
  id: ID!
}

type DepositStatus @entity {
  id: ID!                  # user-farm
  user: User!
  farm: Farm!
  activeDeposit: BigInt!   # Used to explain returns
  totalDeposits: BigInt!
  totalWithdraws: BigInt!
  depositCount: BigInt!
  withdrawCount: BigInt!
}

type Deposit @entity {
  id: ID!
  by: User!
  farm: Farm!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Withdraw @entity {
  id: ID!
  by: User!
  farm: Farm!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}